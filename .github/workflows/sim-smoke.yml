name: sim-smoke

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  chain-backends:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [stwo, plonky3]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      # Cache Cargo registry and build artifacts; updating Cargo.lock will bust the key.
      # Keep an eye on runtime after enabling the cache and tighten the path list if size grows.
      - name: Cache cargo directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build rpp-chain (${{ matrix.backend }})
        run: scripts/build.sh --package rpp-chain --backend ${{ matrix.backend }}
      - name: Run rpp-chain unit tests (${{ matrix.backend }})
        run: scripts/test.sh --unit --package rpp-chain --backend ${{ matrix.backend }}

  sim-smoke:
    runs-on: ubuntu-latest
    env:
      RPP_SIM_STATIC_KEY_SEED: ci-smoke
      RPP_SIM_REQUIRE_DETERMINISTIC: "0"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      # Share the same cache key so registry downloads and build output can be reused across jobs.
      # If cache misses start to dominate runtime, consider separating cargo registry vs target caches.
      - name: Cache cargo directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Ensure documentation builds
        run: cargo doc --no-deps --workspace
      - name: Run deterministic smoke scenario
        run: |
          cargo test -p rpp-sim --test sim_smoke -- --ignored
          cargo run -p rpp-sim -- --scenario scenarios/small_world_smoke.toml --output target/sim-smoke/summary.json
          python3 - <<'PY'
import json
from pathlib import Path
summary_path = Path('target/sim-smoke/summary.json')
if not summary_path.exists():
    raise SystemExit('summary file missing')
with summary_path.open() as fh:
    data = json.load(fh)
required = ['total_publishes', 'total_receives', 'duplicates', 'propagation']
for key in required:
    if key not in data:
        raise SystemExit(f'missing key {key} in summary json')
prop = data['propagation']
if prop is None:
    raise SystemExit('propagation percentiles missing')
p95 = prop['p95_ms']
if not (10000.0 <= p95 <= 60000.0):
    raise SystemExit(f'p95 out of corridor: {p95}')
print('Smoke checks passed with p95', p95)
PY
